import {expect} from '@playwright/test';

import {test} from '../electron.fixture';
import {addEvent, addService, addTopic, getDiagramState} from '../helpers/diagramHelpers';

test.describe('add links scenarios by button between nodes', () => {
  test('should add link by button between nodes with all param', async ({page}) => {
    await addService(page);
    await addTopic(page);
    await addEvent(page, 'Test');

    await page.waitForSelector('[data-testid="serviceNode"]', {state: 'visible'});
    await page.waitForSelector('[data-testid="topicNode"]', {state: 'visible'});

    const serviceNode = page.locator('[data-testid="serviceNode"]').first();
    const topicNode = page.locator('[data-testid="topicNode"]').first();

    const {edgesCount: initialEdgesCount} = await getDiagramState(page);
    await expect(serviceNode).toBeVisible();
    await expect(topicNode).toBeVisible();
    expect(initialEdgesCount).toBe(0);

    const addLinkButton = page.locator('.ant-btn', {hasText: 'Link'});
    await addLinkButton.click();
    const createLinkDrawer = page.locator('[data-testid="drawer-create-link"]');
    await expect(createLinkDrawer).toBeInViewport();

    const serviceSelectChoose = page.locator('[data-testid="create-link-drawer-service-select"]');
    await serviceSelectChoose.click();
    await page.locator('.ant-select-dropdown', {hasText: 'Service_0'}).click();
    await page.locator('.ant-btn', {hasText: 'Create'}).click();
    await expect(page.locator('.ant-notification', {hasText: 'All fields must be filled in'})).toBeInViewport();

    const topicSelectChoose = page.locator('[data-testid="create-link-drawer-topic-select"]');
    await topicSelectChoose.click();
    await page.locator('.ant-select-dropdown', {hasText: 'Topic_0'}).click();
    const eventSelectChoose = page.locator('[data-testid="create-link-drawer-event-select"]');
    await eventSelectChoose.click();
    await page.locator('.ant-select-dropdown', {hasText: 'Test'}).click();
    await page.locator('.ant-btn', {hasText: 'Create'}).click();
    await expect(page.locator('.ant-notification', {hasText: 'Link created'})).toBeInViewport();
  });

  test('should add link by button service -> topic with 2 different events and swap direction', async ({page}) => {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ–ø–∏–∫–∞ –∏ –¥–≤—É—Ö —ç–≤–µ–Ω—Ç–æ–≤
    await addService(page);
    await addTopic(page);
    await addEvent(page, '1');
    await addEvent(page, '2');

    // –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
    await page.waitForSelector('[data-testid="serviceNode"]', {state: 'visible'});
    await page.waitForSelector('[data-testid="topicNode"]', {state: 'visible'});

    const serviceNode = page.locator('[data-testid="serviceNode"]').first();
    const topicNode = page.locator('[data-testid="topicNode"]').first();

    const {edgesCount: initialEdgesCount} = await getDiagramState(page);
    await expect(serviceNode).toBeVisible();
    await expect(topicNode).toBeVisible();
    expect(initialEdgesCount).toBe(0);

    // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–Ω–∫–∞
    const addLinkButton = page.locator('.ant-btn', {hasText: 'Link'});
    await addLinkButton.click();
    const createLinkDrawer = page.locator('[data-testid="drawer-create-link"]');
    await expect(createLinkDrawer).toBeInViewport();

    // –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å
    const serviceSelectChoose = page.locator('[data-testid="create-link-drawer-service-select"]');
    await serviceSelectChoose.click();
    await page.locator('.ant-select-dropdown', {hasText: 'Service_0'}).click();
    await page.locator('.ant-btn', {hasText: 'Create'}).click();
    await expect(page.locator('.ant-notification', {hasText: 'All fields must be filled in'})).toBeInViewport();

    // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø–∏–∫
    const topicSelectChoose = page.locator('[data-testid="create-link-drawer-topic-select"]');
    await topicSelectChoose.click();
    await page.locator('.ant-select-dropdown', {hasText: 'Topic_0'}).click();

    // –í—ã–±–∏—Ä–∞–µ–º —ç–≤–µ–Ω—Ç "1"
    const eventSelectChoose = page.locator('[data-testid="create-link-drawer-event-select"]');
    await eventSelectChoose.click();
    await page.locator('.ant-select-item-option-content', {hasText: '1'}).click();

    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–Ω–∫–∞
    await page.locator('.ant-btn', {hasText: 'Create'}).click();
    await expect(page.locator('.ant-notification', {hasText: 'Link created'})).toBeInViewport();

    await page.waitForTimeout(300);

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ª–∏–Ω–∫–∞
    await addLinkButton.first().click();
    await expect(createLinkDrawer).toBeInViewport();

    await serviceSelectChoose.click();
    await page.locator('.ant-select-dropdown', {hasText: 'Service_0'}).click();
    await page.locator('.ant-btn', {hasText: 'Create'}).click();
    await expect(page.locator('.ant-notification', {hasText: 'All fields must be filled in'})).toBeInViewport();

    await topicSelectChoose.click();
    await page.locator('.ant-select-dropdown', {hasText: 'Topic_0'}).click();
    await eventSelectChoose.click();
    await page.locator('.ant-select-item-option-content', {hasText: '2'}).click();
    await page.locator('.ant-btn', {hasText: 'Create'}).click();
    await expect(page.locator('.ant-notification', {hasText: 'Link created'})).toBeInViewport();

    // –ù–∞–∂–∏–º–∞–µ–º –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –ø–æ —Å–µ—Ä–≤–∏—Å—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    await serviceNode.click({button: 'right'});
    const specificationButton = page.locator('.ant-menu-item', {hasText: 'Specification'});
    await specificationButton.click();

    await page.waitForTimeout(300);

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è —Ç–æ–≥–æ, —á—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å –∏ –≤ –æ–∫–Ω–µ —Å–≤–∞–≥–≥–µ—Ä–∞ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–∏—Å–∞
    const swaggerBox = page.locator('.title', {hasText: 'Service_0'});
    await expect(swaggerBox).toBeInViewport();

    const cancelSpecButton = page.locator('.ant-btn', {hasText: 'Cancel'});
    await cancelSpecButton.click();

    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –ª–∏–Ω–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ç–æ–ø–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∫–∏
    await topicNode.click({button: 'right'});
    const showEventButton = page.locator('.ant-menu-item', {hasText: 'Show events'});
    await showEventButton.click();

    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤ —Å–∞–π–¥–±–∞—Ä–µ –º–µ–Ω—é —Å –ª–∏–Ω–∫–∞–º–∏
    const sideBarLinkMenu = page.locator('.ant-menu-title-content', {hasText: 'Links'});
    await sideBarLinkMenu.click();

    // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –ª–∏–Ω–∫ –≤ —Å–ø–∏—Å–∫–µ
    const firstLink = page.locator('.ant-space-item', {hasText: 'Service_0ü†ñTopic_0'}).first();
    await firstLink.click();

    // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –¥—Ä—É–≥–æ–π –≤–∏–¥ —Å–≤—è–∑–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    const connectTypeConsumeButton = page.locator('.ant-radio-button-label', {hasText: 'Consume'});
    await connectTypeConsumeButton.click();
    const saveButton = page.getByRole('button', {name: 'Save'});
    await saveButton.waitFor({state: 'visible'});
    await saveButton.click();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑—å –ø–æ–º–µ–Ω—è–ª–æ—Å—å –∏ —Å–≤—è–∑–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–≤–µ
    await expect(page.locator('.ant-space-item', {hasText: 'Service_0ü†îTopic_0'})).toBeInViewport();
    await expect(page.locator('.ant-space-item', {hasText: 'Service_0ü†ñTopic_0'})).toBeInViewport();
  });
});
